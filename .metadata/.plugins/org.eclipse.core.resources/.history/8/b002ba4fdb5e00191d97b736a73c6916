object exercises {
	def sum(f: Int => Int, a: Int, b: Int) = {
		def loop(a:Int, acc:Int): Int =
			if (a > b) acc
			else loop(a+1, f(a) + acc)
		loop(a, 0)
	}
	sum(x => x*x, 3, 5)
	
	def product(f: Int => Int) (a:Int, b:Int): Int =
		if (a > b) 1
		else f(a) * product(f) (a+1, b)
	product(x => x*x)(3, 5)
	
	def factorial(n:Int) = product(x=>x) (1, n)
		
	factorial(5)
	
	def mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int) (a: Int, b:Int): Int =
		if (a > b) zero
		else combine(f(a), mapReduce(f, combine, zero)(a+1, b))
	def product2(f:Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x*y, 1) (a, b)
	
	product2(x => x*x)(3,5)
	
	def sum2(f: Int => Int)(a: Int, b: Int): Int = mapReduce(f, (x, y) => x+y, 0) (a, b)
  sum2(x=>x*x) (3, 5)
  import math.abs
  val tolerance = 0.0001
  def isCloseEnough(x: Double, y: Double) =
  		abs((x-y)/x)/x < tolerance
  	def fixedPoint(f: Double => Double) (firstGuess: Double) = {
  		def iterate(guess: Double): Double = {
  			
  		
  		}
  	}
}