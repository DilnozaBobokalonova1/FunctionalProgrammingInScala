package week3;
object rationals {
	val x = new Rational(1, 3)                //> x  : week3.Rational = 1/3
	val y = new Rational(5, 7)                //> y  : week3.Rational = 5/7
	val z = new Rational(3, 2)                //> z  : week3.Rational = 3/2
	x.numer                                   //> res0: Int = 1
	x.denom                                   //> res1: Int = 3
	new Rational(1,2).numer                   //> res2: Int = 1
	new Rational(1,2).denom                   //> res3: Int = 2
	x + y                                     //> res4: week3.Rational = 22/21
	x.sub(y).sub(z)                           //> res5: week3.Rational = -79/42
	y + y                                     //> res6: week3.Rational = 10/7
	x.less(y)                                 //> res7: Boolean = true
	x.max(y)                                  //> res8: week3.Rational = 5/7
	//val strange = new Rational(1, 0)
	//strange.add(strange)
	new Rational(2)                           //> res9: week3.Rational = 2/1
}

class Rational(x: Int, y: Int){
	require(y != 0, "denominator must be nonzero!")
	
	def this(x: Int) = this(x, 1) //a second constructor in addition to the primary one
	
	private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
	//private val g = gcd(x, y)
	def numer = x
	def denom = y
	//or can make numer and denom vals so they are not recomputed every time we call them
	
	def less(that: Rational) = numer * that.denom < that.numer * denom
	def < (that:Rational) = numer*that.denom < that.numer * denom
	def max(that: Rational) = if (this.less(that)) that else this
	def + (that: Rational) =
		new Rational(
			numer * that.denom + that.numer*denom,
			denom * that.denom)
			
	override def toString = {
		val g = gcd(numer, denom)
		numer/g + "/" + denom/g
	}
	def unary_- : Rational = new Rational(-numer, denom)
	def sub(that: Rational) = this + -that
	def - (that: Rational) = this + -that
}
	